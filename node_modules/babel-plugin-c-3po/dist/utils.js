'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.validateAndFormatMsgid = exports.getMsgid = undefined;
exports.quasiToStr = quasiToStr;
exports.getQuasiStr = getQuasiStr;
exports.ast2Str = ast2Str;
exports.strToQuasi = strToQuasi;
exports.rmDirSync = rmDirSync;
exports.hasExpressions = hasExpressions;
exports.getMembersPath = getMembersPath;
exports.template2Msgid = template2Msgid;
exports.isInDisabledScope = isInDisabledScope;
exports.hasDisablingComment = hasDisablingComment;
exports.isC3poImport = isC3poImport;
exports.hasImportSpecifier = hasImportSpecifier;
exports.dedentStr = dedentStr;
exports.poReferenceComparator = poReferenceComparator;

var _child_process = require('child_process');

var _babelTypes = require('babel-types');

var bt = _interopRequireWildcard(_babelTypes);

var _dedent = require('dedent');

var _dedent2 = _interopRequireDefault(_dedent);

var _babelGenerator = require('babel-generator');

var _babelGenerator2 = _interopRequireDefault(_babelGenerator);

var _babelTemplate = require('babel-template');

var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

var _defaults = require('./defaults');

var _errors = require('./errors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var disableRegExp = new RegExp('\\b' + _defaults.DISABLE_COMMENT + '\\b');

function quasiToStr(str) {
    return str.replace(/^`|`$/g, '');
}

function getQuasiStr(node) {
    return quasiToStr((0, _babelGenerator2.default)(node.quasi).code);
}

function ast2Str(ast) {
    return (0, _babelGenerator2.default)(ast).code;
}

function strToQuasi(str) {
    return '`' + str + '`';
}

function rmDirSync(path) {
    (0, _child_process.execSync)('rm -rf ' + path);
}

function hasExpressions(node) {
    return Boolean(node.quasi.expressions.length);
}

function getMembersPath(_ref) {
    var object = _ref.object,
        computed = _ref.computed,
        property = _ref.property;

    /* eslint-disable no-use-before-define */
    var obj = bt.isMemberExpression(object) ? getMembersPath(object) : expr2str(object);

    return computed ? obj + '[' + expr2str(property) + ']' : obj + '.' + property.name;
}

function expr2str(expr) {
    var str = void 0;
    if (bt.isIdentifier(expr)) {
        str = expr.name;
    } else if (bt.isMemberExpression(expr)) {
        str = getMembersPath(expr);
    } else if (bt.isNumericLiteral(expr)) {
        str = expr.value;
    } else if (bt.isStringLiteral(expr)) {
        str = expr.extra.raw;
    } else if (bt.isThisExpression(expr)) {
        str = 'this';
    } else {
        throw new _errors.ValidationError('You can not use ' + expr.type + ' \'${' + ast2Str(expr) + '}\' in localized strings');
    }

    return str;
}

var getMsgid = exports.getMsgid = function getMsgid(str, exprs) {
    return str.reduce(function (s, l, i) {
        var expr = exprs[i];
        return expr === undefined ? s + l : '' + s + l + '${ ' + expr2str(expr) + ' }';
    }, '');
};

var validateAndFormatMsgid = exports.validateAndFormatMsgid = function validateAndFormatMsgid(msgid, exprNames) {
    var msgidAST = (0, _babelTemplate2.default)(strToQuasi(msgid))();
    var msgidExprs = new Set(msgidAST.expression.expressions.map(ast2Str));
    exprNames.forEach(function (exprName) {
        if (!msgidExprs.has(exprName)) {
            throw new _errors.NoExpressionError('Expression \'' + exprName + '\' is not found in the localized string \'' + msgid + '\'.');
        }
    });

    // need to regenerate template to fix spaces between in ${}
    // because translator can accidentally add extra space or remove
    return (0, _babelGenerator2.default)(msgidAST).code.replace(/;$/, '');
};

function template2Msgid(node) {
    var strs = node.quasi.quasis.map(function (_ref2) {
        var raw = _ref2.value.raw;
        return raw;
    });
    var exprs = node.quasi.expressions || [];

    if (exprs.length) {
        return getMsgid(strs, exprs);
    }
    return node.quasi.quasis[0].value.raw;
}

function isInDisabledScope(node, disabledScopes) {
    var scope = node.scope;
    while (scope) {
        if (disabledScopes.has(scope.uid)) {
            return true;
        }
        scope = scope.parent;
    }
    return false;
}

function hasDisablingComment(node) {
    if (!node.body || !node.body.length) {
        return false;
    }
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = node.body[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var _ref4 = _step.value;
            var leadingComments = _ref4.leadingComments;

            if (!leadingComments) {
                continue;
            }
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = leadingComments[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var _ref6 = _step2.value;
                    var value = _ref6.value;

                    if (value.match(disableRegExp)) {
                        return true;
                    }
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    return false;
}

function isC3poImport(node) {
    return node.source.value === _defaults.C3POID;
}

function hasImportSpecifier(node) {
    return node.specifiers && node.specifiers.some(bt.isImportSpecifier);
}

function dedentStr(str) {
    if (str.match(/\n/) !== null) {
        return (0, _dedent2.default)(str);
    }
    return str;
}

function poReferenceComparator(firstPoRef, secondPoRef) {
    if (/.*:\d+$/.test(firstPoRef)) {
        // reference has a form path/to/file.js:line_number
        var firstIdx = firstPoRef.lastIndexOf(':');
        var firstFileRef = firstPoRef.substring(0, firstIdx);
        var firstLineNum = Number(firstPoRef.substring(firstIdx + 1));
        var secondIdx = secondPoRef.lastIndexOf(':');
        var secondFileRef = secondPoRef.substring(0, secondIdx);
        var secondLineNum = Number(secondPoRef.substring(secondIdx + 1));
        if (firstFileRef !== secondFileRef) {
            if (firstFileRef < secondFileRef) {
                return -1;
            }
            return 1;
        }
        // else
        if (firstLineNum < secondLineNum) {
            return -1;
        } else if (firstLineNum > secondLineNum) {
            return 1;
        }
        return 0;
    }
    // else
    // reference has a form path/to/file.js
    if (firstPoRef < secondPoRef) {
        return -1;
    } else if (firstPoRef > secondPoRef) {
        return 1;
    }
    return 0;
}