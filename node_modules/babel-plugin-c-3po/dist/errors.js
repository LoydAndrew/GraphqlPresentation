'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ValidationError = ValidationError;
exports.NoTranslationError = NoTranslationError;
exports.NoExpressionError = NoExpressionError;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ConfigValidationError = exports.ConfigValidationError = function (_Error) {
    _inherits(ConfigValidationError, _Error);

    function ConfigValidationError() {
        _classCallCheck(this, ConfigValidationError);

        return _possibleConstructorReturn(this, (ConfigValidationError.__proto__ || Object.getPrototypeOf(ConfigValidationError)).apply(this, arguments));
    }

    return ConfigValidationError;
}(Error);

var ConfigError = exports.ConfigError = function (_Error2) {
    _inherits(ConfigError, _Error2);

    function ConfigError() {
        _classCallCheck(this, ConfigError);

        return _possibleConstructorReturn(this, (ConfigError.__proto__ || Object.getPrototypeOf(ConfigError)).apply(this, arguments));
    }

    return ConfigError;
}(Error);

function ValidationError(message) {
    this.name = 'ValidationError';
    this.message = message;
    this.stack = new Error().stack;
}

ValidationError.prototype = Object.create(Error.prototype);
ValidationError.prototype.constructor = ValidationError;

function NoTranslationError(message) {
    this.name = 'NoTranslationError';
    this.message = message;
    this.stack = new Error().stack;
}

NoTranslationError.prototype = Object.create(Error.prototype);
NoTranslationError.prototype.constructor = NoTranslationError;

function NoExpressionError(message) {
    this.name = 'NoExpressionError';
    this.message = message;
    this.stack = new Error().stack;
}
NoExpressionError.prototype = Object.create(Error.prototype);
NoExpressionError.prototype.constructor = NoExpressionError;