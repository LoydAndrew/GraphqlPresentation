'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isContextTagCall = isContextTagCall;
exports.isContextFnCall = isContextFnCall;
exports.isValidFnCallContext = isValidFnCallContext;
exports.isValidTagContext = isValidTagContext;

var _babelTypes = require('babel-types');

var t = _interopRequireWildcard(_babelTypes);

var _utils = require('./utils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function isContextTagCall(node, context) {
    return t.isTaggedTemplateExpression(node) && t.isMemberExpression(node.tag) && t.isCallExpression(node.tag.object) && t.isIdentifier(node.tag.object.callee) && node.tag.object.callee.name === context.getAliasFor('context');
}

function isContextFnCall(node, context) {
    return t.isCallExpression(node) && t.isMemberExpression(node.callee) && t.isCallExpression(node.callee.object) && t.isIdentifier(node.callee.object.callee) && node.callee.object.callee.name === context.getAliasFor('context');
}

function isValidFnCallContext(nodePath) {
    var node = nodePath.node;
    var argsLength = node.callee.object.arguments.length;

    if (argsLength !== 1) {
        throw nodePath.buildCodeFrameError('Context function accepts only 1 argument but has ' + argsLength + ' instead.');
    }

    var contextStr = node.callee.object.arguments[0];

    if (!t.isLiteral(contextStr)) {
        throw nodePath.buildCodeFrameError('Expected string as a context argument. Actual - "' + (0, _utils.ast2Str)(contextStr) + '".');
    }

    return true;
}

function isValidTagContext(nodePath) {
    var node = nodePath.node;
    var argsLength = node.tag.object.arguments.length;

    if (argsLength !== 1) {
        throw nodePath.buildCodeFrameError('Context function accepts only 1 argument but has ' + argsLength + ' instead.');
    }

    var contextStr = node.tag.object.arguments[0];

    if (!t.isLiteral(contextStr)) {
        throw nodePath.buildCodeFrameError('Expected string as a context argument. Actual - "' + (0, _utils.ast2Str)(contextStr) + '".');
    }

    return true;
}