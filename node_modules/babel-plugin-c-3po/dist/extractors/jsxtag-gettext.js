'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _babelTypes = require('babel-types');

var t = _interopRequireWildcard(_babelTypes);

var _tagGettext = require('./tag-gettext');

var _tagGettext2 = _interopRequireDefault(_tagGettext);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var NAME = 'jsxtag-gettext';

function match(node, context) {
    return t.isTaggedTemplateExpression(node) && node.tag.name === context.getAliasFor(NAME);
}

function templateLiteral2Array(_ref) {
    var quasis = _ref.quasis,
        expressions = _ref.expressions;

    var items = [];

    quasis.forEach(function (quasi, i) {
        if (quasi.value.cooked !== '') {
            items.push(t.stringLiteral(quasi.value.cooked));
        }
        if (expressions[i]) {
            items.push(expressions[i]);
        }
    });

    return items;
}

function resolveDefault(node, context) {
    var resolved = _tagGettext2.default.resolveDefault(node, context);
    if (t.isTemplateLiteral(resolved)) {
        return t.arrayExpression(templateLiteral2Array(resolved));
    }
    return t.arrayExpression([resolved]);
}

function resolve(node, translation) {
    var resolved = _tagGettext2.default.resolve(node, translation);
    if (t.isExpressionStatement(resolved)) {
        return t.arrayExpression(templateLiteral2Array(resolved.expression));
    }
    return t.arrayExpression([resolved]);
}

exports.default = _extends({}, _tagGettext2.default, {
    resolve: resolve,
    resolveDefault: resolveDefault,
    match: match,
    name: NAME
});