'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _babelTypes = require('babel-types');

var t = _interopRequireWildcard(_babelTypes);

var _defaults = require('../defaults');

var _utils = require('../utils');

var _poHelpers = require('../po-helpers');

var _errors = require('../errors');

var _babelTemplate = require('babel-template');

var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

var NAME = 'ngettext';
var MSGID = _defaults.PO_PRIMITIVES.MSGID,
    MSGSTR = _defaults.PO_PRIMITIVES.MSGSTR,
    MSGID_PLURAL = _defaults.PO_PRIMITIVES.MSGID_PLURAL;


function getMsgid(node) {
    var _node$arguments$slice = node.arguments.slice(0, -1),
        _node$arguments$slice2 = _toArray(_node$arguments$slice),
        msgidTag = _node$arguments$slice2[0],
        _ = _node$arguments$slice2.slice(1);

    return (0, _utils.template2Msgid)(msgidTag);
}

function validateNPlural(exp) {
    if (!t.isIdentifier(exp) && !t.isNumericLiteral(exp) && !t.isMemberExpression(exp)) {
        throw new _errors.ValidationError(exp.type + ' \'' + (0, _utils.ast2Str)(exp) + '\' can not be used as plural argument');
    }
}

var validate = function validate(node, context) {
    var msgidTag = node.arguments[0];
    var msgidAlias = context.getAliasFor('msgid');
    if (!t.isTaggedTemplateExpression(msgidTag)) {
        throw new _errors.ValidationError('First argument must be tagged template expression. You should use \'' + msgidAlias + '\' tag');
    }
    if (msgidTag.tag.name !== msgidAlias) {
        throw new _errors.ValidationError('Expected \'' + msgidAlias + '\' for the first argument but not \'' + msgidTag.tag.name + '\'');
    }
    var tags = node.arguments.slice(1, -1);

    // will throw validation error if tags has expressions with wrong format
    tags.forEach(function (quasi) {
        return (0, _utils.template2Msgid)({ quasi: quasi });
    });

    validateNPlural(node.arguments[node.arguments.length - 1]);
    var msgid = (0, _utils.template2Msgid)(msgidTag);
    if (!(0, _poHelpers.hasUsefulInfo)(msgid)) {
        throw new _errors.ValidationError('Can not translate \'' + (0, _utils.getQuasiStr)(msgidTag) + '\'');
    }
};

function match(node, context) {
    return t.isCallExpression(node) && t.isIdentifier(node.callee) && node.callee.name === context.getAliasFor(NAME) && node.arguments.length > 0;
}

function extract(node, context) {
    var _translate;

    var tags = node.arguments.slice(0, -1);
    var msgid = context.isDedent() ? (0, _utils.dedentStr)((0, _utils.template2Msgid)(tags[0])) : (0, _utils.template2Msgid)(tags[0]);
    var nplurals = (0, _poHelpers.getNPlurals)(context.getHeaders());
    if (tags.length !== nplurals) {
        throw new _errors.ValidationError('Expected to have ' + nplurals + ' plural forms but have ' + tags.length + ' instead');
    }
    // TODO: handle case when only 1 plural form
    var msgidPlural = context.isDedent() ? (0, _utils.dedentStr)((0, _utils.template2Msgid)({ quasi: tags[1] })) : (0, _utils.template2Msgid)({ quasi: tags[1] });
    var translate = (_translate = {}, _defineProperty(_translate, MSGID, msgid), _defineProperty(_translate, MSGID_PLURAL, msgidPlural), _defineProperty(_translate, MSGSTR, []), _translate);

    for (var i = 0; i < nplurals; i++) {
        translate[MSGSTR][i] = '';
    }

    return translate;
}

function ngettextTemplate(ngettext, pluralForm) {
    return (0, _babelTemplate2.default)('function NGETTEXT(n, args) { ' + (0, _poHelpers.pluralFnBody)(pluralForm) + ' }')({ NGETTEXT: ngettext });
}

function getNgettextUID(state, pluralFunc) {
    /* eslint-disable no-underscore-dangle */
    if (!state.file.__ngettextUid) {
        var uid = state.file.scope.generateUidIdentifier('tag_ngettext');
        state.file.path.unshiftContainer('body', ngettextTemplate(uid, pluralFunc));
        state.file.__ngettextUid = uid;
    }
    return state.file.__ngettextUid;
}

function resolveDefault(node, context, state) {
    var headers = context.getHeaders();
    var tagArg = node.arguments[node.arguments.length - 1];
    node.arguments[0] = node.arguments[0].quasi;
    var args = node.arguments.slice(0, -1).map(function (quasi) {
        var quasiStr = (0, _utils.getQuasiStr)({ quasi: quasi });
        var dedentedStr = context.isDedent() ? (0, _utils.dedentStr)(quasiStr) : quasiStr;
        return (0, _babelTemplate2.default)((0, _utils.strToQuasi)(dedentedStr))().expression;
    });

    var nplurals = (0, _poHelpers.getNPlurals)(headers);

    while (nplurals > args.length) {
        var last = args[args.length - 1];
        args.push(t.templateLiteral(last.quasis, last.expressions));
    }

    return (0, _babelTemplate2.default)('NGETTEXT(N, ARGS)')({
        NGETTEXT: getNgettextUID(state, (0, _poHelpers.getPluralFunc)(headers)),
        N: tagArg,
        ARGS: t.arrayExpression(args)
    });
}

function resolve(node, translationObj, context, state) {
    var _node$arguments$slice3 = node.arguments.slice(0, -1),
        _node$arguments$slice4 = _toArray(_node$arguments$slice3),
        msgidTag = _node$arguments$slice4[0],
        _ = _node$arguments$slice4.slice(1);

    var args = translationObj[MSGSTR];
    var tagArg = node.arguments[node.arguments.length - 1];
    var exprs = msgidTag.quasi.expressions.map(_utils.ast2Str);

    if (t.isIdentifier(tagArg) || t.isMemberExpression(tagArg)) {
        return (0, _babelTemplate2.default)('NGETTEXT(N, ARGS)')({
            NGETTEXT: getNgettextUID(state, (0, _poHelpers.getPluralFunc)(context.getHeaders())),
            N: tagArg,
            ARGS: t.arrayExpression(args.map(function (l) {
                var _tpl = (0, _babelTemplate2.default)((0, _utils.validateAndFormatMsgid)(l, exprs))(),
                    _tpl$expression = _tpl.expression,
                    quasis = _tpl$expression.quasis,
                    expressions = _tpl$expression.expressions;

                return t.templateLiteral(quasis, expressions);
            }))
        });
    }

    if (t.isLiteral(tagArg)) {
        var pluralFn = (0, _poHelpers.makePluralFunc)((0, _poHelpers.getPluralFunc)(context.getHeaders()));
        var orig = (0, _utils.validateAndFormatMsgid)(pluralFn(tagArg.value, args), exprs);
        return (0, _babelTemplate2.default)(orig)();
    }
    return undefined;
}

exports.default = { match: match, extract: extract, resolve: resolve, name: NAME, validate: validate, resolveDefault: resolveDefault, getMsgid: getMsgid };