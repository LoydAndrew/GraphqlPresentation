'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.configSchema = undefined;
exports.validateConfig = validateConfig;

var _defaults = require('./defaults');

var _ajv = require('ajv');

var _ajv2 = _interopRequireDefault(_ajv);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var FAIL = _defaults.UNRESOLVED_ACTION.FAIL,
    WARN = _defaults.UNRESOLVED_ACTION.WARN,
    SKIP = _defaults.UNRESOLVED_ACTION.SKIP;
var FULL = _defaults.LOCATION.FULL,
    FILE = _defaults.LOCATION.FILE,
    NEVER = _defaults.LOCATION.NEVER;


var extractConfigSchema = {
    type: ['object', 'null'],
    properties: {
        output: { type: 'string' },
        location: { enum: [FULL, FILE, NEVER] }
    },
    required: ['output'],
    additionalProperties: false
};

var resolveConfigSchema = {
    type: ['object', 'null'],
    properties: {
        translations: { type: 'string' },
        unresolved: { enum: [FAIL, WARN, SKIP] }
    },
    required: ['translations'],
    additionalProperties: false
};

var extractorsSchema = {
    type: 'object',
    additionalProperties: {
        type: 'object',
        properties: {
            invalidFormat: { enum: [FAIL, WARN, SKIP] }
        },
        additionalProperties: false
    }
};

var defaultHeadersSchema = {
    anyOf: [{
        type: 'object',
        properties: {
            'content-type': { type: 'string' },
            'plural-forms': { type: 'string' }
        },
        additionalProperties: false
    }, {
        type: 'string'
    }]
};

var configSchema = exports.configSchema = {
    type: 'object',
    properties: {
        extract: extractConfigSchema,
        resolve: resolveConfigSchema,
        extractors: extractorsSchema,
        dedent: { type: 'boolean' },
        discover: { type: 'array' },
        defaultHeaders: defaultHeadersSchema,
        addComments: { oneOf: [{ type: 'boolean' }, { type: 'string' }] },
        sortByMsgid: { type: 'boolean' }
    },
    additionalProperties: false
};

function validateConfig(config, schema) {
    var ajv = new _ajv2.default({ allErrors: true, verbose: true, v5: true });
    var isValid = ajv.validate(schema, config);
    return [isValid, ajv.errorsText(), ajv.errors];
}