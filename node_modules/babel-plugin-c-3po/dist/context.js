'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _defaults = require('./defaults');

var _tagGettext = require('./extractors/tag-gettext');

var _tagGettext2 = _interopRequireDefault(_tagGettext);

var _jsxtagGettext = require('./extractors/jsxtag-gettext');

var _jsxtagGettext2 = _interopRequireDefault(_jsxtagGettext);

var _gettext = require('./extractors/gettext');

var _gettext2 = _interopRequireDefault(_gettext);

var _ngettext = require('./extractors/ngettext');

var _ngettext2 = _interopRequireDefault(_ngettext);

var _poHelpers = require('./po-helpers');

var _errors = require('./errors');

var _config = require('./config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var FAIL = _defaults.UNRESOLVED_ACTION.FAIL,
    WARN = _defaults.UNRESOLVED_ACTION.WARN,
    SKIP = _defaults.UNRESOLVED_ACTION.SKIP;


var DEFAULT_EXTRACTORS = [_tagGettext2.default, _jsxtagGettext2.default, _gettext2.default, _ngettext2.default];

function logAction(message) {
    var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SKIP;

    /* eslint-disable no-console */
    switch (level) {
        case FAIL:
            throw new Error(message);
        case SKIP:
            break;
        case WARN:
            // TODO: use logger that can log to console or file or stdout
            console.warn(message);
            break;
        default:
            // TODO: use logger that can log to console or file or stdout
            console.warn(message);
    }
}

var C3poContext = function () {
    function C3poContext() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, C3poContext);

        this.config = config;

        var _validateConfig = (0, _config.validateConfig)(this.config, _config.configSchema),
            _validateConfig2 = _slicedToArray(_validateConfig, 2),
            validationResult = _validateConfig2[0],
            errorsText = _validateConfig2[1];

        if (!validationResult) {
            throw new _errors.ConfigValidationError(errorsText);
        }
        this.clear();
        if (this.config.defaultHeaders && typeof this.config.defaultHeaders === 'string') {
            var _parsePoData = (0, _poHelpers.parsePoData)(this.config.defaultHeaders),
                headers = _parsePoData.headers;

            this.config.defaultHeaders = headers;
        }
        this.setPoData();
        Object.freeze(this.config);
    }

    _createClass(C3poContext, [{
        key: 'clear',
        value: function clear() {
            this.aliases = {};
            this.imports = new Set();
        }
    }, {
        key: 'getAliasFor',
        value: function getAliasFor(funcName) {
            // TODO: implement possibility to overwrite or add aliases in config;
            var defaultAlias = _defaults.ALIASES[funcName];
            var alias = this.aliases[funcName] || defaultAlias;
            if (!alias) {
                throw new _errors.ConfigError('Alias for function ' + funcName + ' was not found ' + JSON.stringify(_defaults.ALIASES));
            }
            return alias;
        }
    }, {
        key: 'setAliases',
        value: function setAliases(aliases) {
            this.aliases = aliases;
        }
    }, {
        key: 'addAlias',
        value: function addAlias(funcName, alias) {
            this.aliases[funcName] = alias;
        }
    }, {
        key: 'setImports',
        value: function setImports(imports) {
            this.imports = imports;
        }
    }, {
        key: 'hasImport',
        value: function hasImport(alias) {
            var isInDiscover = this.config.discover && this.config.discover.indexOf(alias) !== -1;
            return this.imports.has(alias) || isInDiscover;
        }
    }, {
        key: 'addImport',
        value: function addImport(importName) {
            this.imports.add(importName);
        }
    }, {
        key: 'getExtractors',
        value: function getExtractors() {
            // TODO: implement possibility to specify additional extractors in config;
            return DEFAULT_EXTRACTORS;
        }
    }, {
        key: 'getHeaders',
        value: function getHeaders() {
            return this.poData && this.poData.headers || this.config.defaultHeaders || _defaults.DEFAULT_HEADERS;
        }
    }, {
        key: 'getLocation',
        value: function getLocation() {
            return this.config.extract && this.config.extract.location || _defaults.LOCATION.FULL;
        }
    }, {
        key: 'getOutputFilepath',
        value: function getOutputFilepath() {
            return this.config.extract && this.config.extract.output || _defaults.DEFAULT_POT_OUTPUT;
        }
    }, {
        key: 'getPoFilePath',
        value: function getPoFilePath() {
            return this.config.resolve && this.config.resolve.translations;
        }
    }, {
        key: 'isExtractMode',
        value: function isExtractMode() {
            return Boolean(this.config.extract);
        }
    }, {
        key: 'isResolveMode',
        value: function isResolveMode() {
            return Boolean(this.config.resolve);
        }
    }, {
        key: 'noTranslationAction',
        value: function noTranslationAction(message) {
            if (!this.isResolveMode()) {
                return;
            }
            logAction(message, this.config.resolve.unresolved);
        }
    }, {
        key: 'validationFailureAction',
        value: function validationFailureAction(funcName, message) {
            var level = this.config.extractors && this.config.extractors[funcName] && this.config.extractors[funcName].invalidFormat || FAIL;
            logAction(message, level);
        }
    }, {
        key: 'isDedent',
        value: function isDedent() {
            if (this.config.dedent === undefined) {
                return true;
            }
            return this.config.dedent;
        }
    }, {
        key: 'devCommentsEnabled',
        value: function devCommentsEnabled() {
            return Boolean(this.config.addComments);
        }
    }, {
        key: 'getAddComments',
        value: function getAddComments() {
            return this.config.addComments;
        }
    }, {
        key: 'isSortedByMsgid',
        value: function isSortedByMsgid() {
            return Boolean(this.config.sortByMsgid);
        }
    }, {
        key: 'setPoData',
        value: function setPoData() {
            var poFilePath = this.getPoFilePath();
            if (!poFilePath) {
                this.poData = (0, _poHelpers.getDefaultPoData)(this.getHeaders());
                return;
            }
            this.poData = poFilePath === 'default' ? (0, _poHelpers.getDefaultPoData)(this.getHeaders()) : (0, _poHelpers.parsePoData)(poFilePath);
        }
    }, {
        key: 'getTranslations',
        value: function getTranslations() {
            var gettextContext = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

            return this.poData.translations[gettextContext];
        }
    }]);

    return C3poContext;
}();

exports.default = C3poContext;